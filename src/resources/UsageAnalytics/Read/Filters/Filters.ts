import {ReadServiceHealthResponse, ReadServiceHealthApi, ReadServiceStatusResponse} from '../ReadServiceCommon.js';
import ReadServiceResource from '../ReadServiceResource.js';
import {
    CreatePermissionsFilterModel,
    CreatePermissionsFilterResponse,
    CreateReportingFilterModel,
    CreateReportingFilterResponse,
    FilterResponse,
    FilterTargetsModel,
    FilterTargetsResponse,
    ListFiltersResponse,
    PermissionsFilterUser,
    UpdatePermissionsFilterModel,
    UpdatePermissionsFilterResponse,
    UpdateReportingFilterModel,
    UpdateReportingFilterResponse,
} from './FiltersInterfaces.js';

export default class Filters extends ReadServiceResource implements ReadServiceHealthApi {
    static baseUrl = '/rest/ua/v15/filters';
    static reportingBaseUrl = `${Filters.baseUrl}/reporting`;
    static permissionsBaseUrl = `${Filters.baseUrl}/permissions`;

    /**
     * Get all reporting filters.
     */
    listReportFilters() {
        return this.api.get<ListFiltersResponse>(this.buildPathWithOrg(Filters.reportingBaseUrl));
    }

    /**
     * Get a reporting filter.
     *
     * @param filterId The unique identifier of a filter. This id is generated by the server when creating a filter.
     */
    getReportFilter(filterId: string) {
        return this.api.get<FilterResponse>(this.buildPathWithOrg(`${Filters.reportingBaseUrl}/${filterId}`));
    }

    /**
     * Create a reporting filter.
     */
    createReportFilter(filter: CreateReportingFilterModel) {
        return this.api.post<CreateReportingFilterResponse>(this.buildPathWithOrg(Filters.reportingBaseUrl), filter);
    }

    /**
     * Update a reporting filter
     *
     * @param filterId The unique identifier of a filter. This id is generated by the server when creating a filter.
     */
    updateReportFilter(filterId: string, filter: UpdateReportingFilterModel) {
        return this.api.put<UpdateReportingFilterResponse>(
            this.buildPathWithOrg(`${Filters.reportingBaseUrl}/${filterId}`),
            filter,
        );
    }

    /**
     * Delete a reporting filter
     *
     * @param filterId The unique identifier of a filter. This id is generated by the server when creating a filter.
     */
    deleteReportFilter(filterId: string) {
        return this.api.delete(this.buildPathWithOrg(`${Filters.reportingBaseUrl}/${filterId}`));
    }

    /**
     * Get all permission filters.
     */
    listPermissionFilters() {
        return this.api.get<ListFiltersResponse>(this.buildPathWithOrg(Filters.permissionsBaseUrl));
    }

    /**
     * Get a permission filter.
     */
    getPermissionFilter(filterId: string) {
        return this.api.get<FilterResponse>(this.buildPathWithOrg(`${Filters.permissionsBaseUrl}/${filterId}`));
    }

    /**
     * Create a permission filter.
     */
    createPermissionFilter(filter: CreatePermissionsFilterModel) {
        return this.api.post<CreatePermissionsFilterResponse>(
            this.buildPathWithOrg(Filters.permissionsBaseUrl),
            filter,
        );
    }

    /**
     * Update a permission filter.
     *
     * @param filterId The unique identifier of a filter. This id is generated by the server when creating a filter.
     */
    updatePermissionFilter(filterId: string, filter: UpdatePermissionsFilterModel) {
        return this.api.put<UpdatePermissionsFilterResponse>(
            this.buildPathWithOrg(`${Filters.permissionsBaseUrl}/${filterId}`),
            filter,
        );
    }

    /**
     * Delete a permission filter.
     *
     * @param filterId The unique identifier of a filter. This id is generated by the server when creating a filter.
     */
    deletePermissionFilter(filterId: string) {
        return this.api.delete(this.buildPathWithOrg(`${Filters.permissionsBaseUrl}/${filterId}`));
    }

    /**
     * Get the users of a permission filters.
     *
     * @param filterId The unique identifier of a filter. This id is generated by the server when creating a filter.
     */
    getPermissionFilterUsers(filterId: string) {
        return this.api.get<PermissionsFilterUser[]>(`${Filters.permissionsBaseUrl}/${filterId}/users`);
    }

    /**
     * Set the users of a permission filter.
     *
     * @param filterId The unique identifier of a filter. This id is generated by the server when creating a filter.
     */
    updatePermissionFilterUsers(filterId: string, users: string[]) {
        return this.api.put(this.buildPathWithOrg(`${Filters.permissionsBaseUrl}/${filterId}/users`), users);
    }

    /**
     * Get the targets of a permission filters.
     *
     * @param filterId The unique identifier of a filter. This id is generated by the server when creating a filter.
     */
    getPermissionFilterTargets(filterId: string) {
        return this.api.get<FilterTargetsResponse[]>(`${Filters.permissionsBaseUrl}/${filterId}/targets`);
    }

    /**
     * Set the targets of a permission filter.
     *
     * @param filterId The unique identifier of a filter. This id is generated by the server when creating a filter.
     */
    updatePermissionFilterTargets(filterId: string, targets: FilterTargetsModel) {
        return this.api.put(this.buildPathWithOrg(`${Filters.permissionsBaseUrl}/${filterId}/targets`), targets);
    }

    checkHealth() {
        return this.api.get<ReadServiceHealthResponse>(`${Filters.baseUrl}/monitoring/health`);
    }

    checkStatus() {
        return this.api.get<ReadServiceStatusResponse>(`${Filters.baseUrl}/status`);
    }
}
