import {ReportType} from '../../../Enums';
import ReadServiceResource from '../ReadServiceResource';
import {
    CreateReportModel,
    CreateReportResponse,
    GetReportOptions,
    GetReportTemplateOptions,
    ListReportsOptions,
    ListReportsResponse,
    ReportAccessRequest,
    ReportAccessResponse,
    ReportModel,
    TemplateResponse,
    ReportUsersResponse,
    StatusResponse,
    TemplateMetadataResponse,
    UpdateReportModel,
} from './ReportsInterfaces';

export default class Reports extends ReadServiceResource {
    static baseUrl = '/rest/ua/v15/reports';

    /**
     * Get the persisted reports of one or all types.
     */
    list(options?: ListReportsOptions) {
        return this.api.get<ListReportsResponse>(this.buildPathWithOrg(Reports.baseUrl, options));
    }

    /**
     * Get a report.
     *
     * @param reportId The unique identifier of a report. This id is generated by the server when creating a report.
     */
    get(reportId: string, options?: GetReportOptions) {
        return this.api.get<ReportModel>(this.buildPathWithOrg(`${Reports.baseUrl}/${reportId}`, options));
    }

    /**
     * Create a report.
     */
    create(report: CreateReportModel) {
        return this.api.post<CreateReportResponse>(this.buildPathWithOrg(Reports.baseUrl), report);
    }

    /**
     * Update a report.
     *
     * @param reportId The unique identifier of a report. This id is generated by the server when creating a report.
     */
    update(reportId: string, report: UpdateReportModel) {
        return this.api.put<UpdateReportModel>(this.buildPathWithOrg(`${Reports.baseUrl}/${reportId}`), report);
    }

    /**
     * Delete a report.
     *
     * @param reportId The unique identifier of a report. This id is generated by the server when creating a report.
     */
    delete(reportId: string) {
        return this.api.delete(this.buildPathWithOrg(`${Reports.baseUrl}/${reportId}`));
    }

    /**
     * Get the users and groups who can view a report.
     *
     * @param reportId The unique identifier of a report. This id is generated by the server when creating a report.
     */
    getAccess(reportId: string) {
        return this.api.get<ReportAccessResponse>(this.buildPathWithOrg(`${Reports.baseUrl}/${reportId}/access`));
    }

    /**
     * Set the users and groups who are allowed to view a report.
     *
     * @param reportId The unique identifier of a report. This id is generated by the server when creating a report.
     */
    setAccess(reportId: string, reportAccess: ReportAccessRequest) {
        return this.api.put(this.buildPathWithOrg(`${Reports.baseUrl}/${reportId}/access`), reportAccess);
    }

    /**
     * Get the users who can view a report.
     *
     * @param reportId The unique identifier of a report. This id is generated by the server when creating a report.
     */
    getUsers(reportId: string) {
        return this.api.get<ReportUsersResponse>(this.buildPathWithOrg(`${Reports.baseUrl}/${reportId}/users`));
    }

    /**
     * Set the users who are allowed to view a report.
     *
     * @param reportId The unique identifier of a report. This id is generated by the server when creating a report.
     */
    setUsers(reportId: string, userIds: string[]) {
        return this.api.put(this.buildPathWithOrg(`${Reports.baseUrl}/${reportId}/users`), userIds);
    }

    /**
     * Health check for the reports service
     */
    healthcheck() {
        return this.api.get<StatusResponse>(`${Reports.baseUrl}/monitoring/health`);
    }

    /**
     * Get a report template.
     *
     * @param templateId The unique identifier of a template.
     */
    getReportTemplate(templateId: string, options?: GetReportTemplateOptions) {
        return this.api.get<TemplateResponse[]>(
            this.buildPathWithOrg(`${Reports.baseUrl}/templates/${templateId}`, options)
        );
    }

    /**
     * Get metadata about available report templates.
     *
     * @param type The type of the report. Must be either 'explorer' or 'dashboard'.
     */
    listReportTemplates(type: ReportType, options?: GetReportTemplateOptions) {
        return this.api.get<TemplateMetadataResponse[]>(
            this.buildPathWithOrg(`${Reports.baseUrl}/templates`, {type, ...options})
        );
    }

    /**
     * Get the reports service status.
     */
    getServiceStatus() {
        return this.api.get<StatusResponse>(`${Reports.baseUrl}/status`);
    }
}
